48.49.53.54.56.60.62*.75

1.
①封装：把内部实现私有化把访问的数据公开化
②继承：子类继承父类，提高代码复用性
③多态：向上造型（对象的多态）与重写、重载（方法的多态）

2.
public:都能访问
protected:子类、同包类能访问
不写：同包类能访问
private：都不能访问

3.不是

4.不对，因为小数默认为double

5.不对，因为小数默认为double需要强转

6.①加法之后是int型不能再赋值给short型需要进行强制转换s1=(short)s1+1;
②正常编译s1+=1内部有自动转换

7.有，保留字，但没用

8.Integer是int的包装类
①Integer是引用类型，int是基本类型
②Integer有许多方法和属性，int没有

9.
①&是位运算符，&&不是
②在做逻辑运算时&&有短路功能，&没有短路功能

10.①&|^是位运算，&&||是条件运算
②在做逻辑运算时&&||有短路功能，&|没有短路功能

11.他们都是内存的一部分
stack栈 heap堆
①stack存放临时变量和参数 heap存放成员变量
②方法结束后，stack的数据清空，heap不清空
③stack是一种数据结构，增删元素遵循先进后出原则，heap增删元素不遵循

12.Math.round(11.5)=12 Math.round(-11.5)=11

13.2<<3

15.数组没有length()方法但有length属性，String有length（）方法

16.ok:标识 break ok

17.不能

18.不对，equals为ture hashcode一定相同

19.String被final修饰，不能被继承

20.都是true（equalsIgnoreCase为忽略大小写）

21.值传递，java只有值传递参数

22.String str=new String("你好啊".getbyte("utf-8"),"gbk");

23.不同的2个类，都有储存字符串的功能
①String类被final修饰，因此对象不可改变，如果改变则引用变量会指向新的对象，而改变StringBuffer对象不会创建新的对象。因此，如果需要频繁修改一个字符串则用StringBuffer来储存会更节省内存
②StringBuffer本质上是一个char数组，String不是

24.是3个不同的类，都有储存字符串的功能
①StringBuffer和StringBuilder本质上都是一个char数组，但StringBuffer是线程安全的，StringBuilder不是线程安全的
②String被final修饰，因此创建String对象后对象不可改变，如果改变则会创建新的对象。但StringBuilder和Stringbuffer是可以改变的。因此当需要频繁改变字符串时使用StringBuffer和StringBuilder

25.他们是多态性的不同表现形式，方法名都相同
①重载访问修饰词可以不同，重写的访问修饰词权限必须大于被重写的方法
②重载返回值类型可以不同，重写的返回值类型必须小于或等于被重写的方法
③重载的参数列表一定不同，重写的参数列表一定相同
④重载方法抛出的异常可以不同，重写抛出的异常一定小于或等于被重写的方法

26.
①1,2.0
②1,2.0
3.0, java program

27.不知道

28.可以，因为char是使用unicode编码

29.他们不能实例化
①抽象类可以有抽象方法，普通方法，成员变量，常量。接口只能有抽象方法，常量。
②抽象类只能继承类，单继承。接口只能继承接口，多继承。
③抽象类可以实现接口，接口不能实现接口。

30.都是内部类
①static Nested Class可以不依赖外部类实例化,Inner Class只能在外部类中实例化
②static Nested Class不能直接访问外部类的属性和方法，Inner Class可以直接访问外部类的属性和方法

31.会，有些无用的对象依然后引用变量指向它，这些对象不能被GC回收，导致内存损耗

32.都不能

33.都是变量
①静态变量不依赖对象，直接类名可以访问，实例变量依赖对象，对象名才能访问

34.不能

35.super.clone();

36.GC是java的垃圾回收器，作用是销毁无用的对象。因为开发人员忘记或错误的回收内存会导致系统不稳定
甚至崩溃，所以java设计了GC自动回收无用的对象释放内存，开发人员就不需要再担心内存问题。可以使用
System.gc()让GC尽快回收无用对象

*37.使开发人员不需要再担心内存问题，有效的防止内存泄露，不知道。

38.是一个低优先级的线程调用finalize()方法回收无用对象，不能马上回收内存。只能使用System.gc()通知
GC尽快回收

39.
①3个
②一个是"xyz" 一个是指向"xyz"的引用对象s

40.
①可以，而且是多继承。
②可以
③可以

41.不知道

42.可以包含多个类，但只能有一个类被public修饰且与文件名相同

43.
包：①java.lang ②java.util ③java.awt ④java.sql ⑤java.text ⑥java.math
类：①StringBuilder ②StringBuffer ③String ④ArrayList ⑤LinkedList
接口：①map ②list ③set ④Queue ⑤Deque

44.可以继承，可以实现，并且是有且只有继承（或实现）一个类

45.内部类只能访问创建他的类的成员，没有限制。但内部类被static修饰时，不能访问

46.重写：父类与子类的多态性的表现、重载：一个类中的多态性的表现、向上造型：一个引用可以指
向不同的对象

47.不能被继承

48.不知

49.1a2b2b

50.三行

51.

52.CE

53.
①Integer.parseInt() Integer.valueOf();
②String.valueOf(); +"" toString
③
Double d=3.54551;
DecimalFormat df=new DecimalFormat("#.00");
System.out.println(df.format(d));

54

61.不会

62.当JAVA程序违反了java语义规则时，java虚拟机会把即将发生的错误表示为一个异常。违反规则
包括2种，第一种是java类库内置的语义检查,例如访问null的对象，第二种是自定义的异常，可以
使用throw抛出引发异常终止程序，所有异常都是Throwable的子类

63.
1.error几乎不可恢复，Exception可以被恢复
2.error无法被捕捉和处理，Exception可以被捕捉并处理，是一种设计或实现问题

64.？？？？？？在return之后，返回之前

65.throws 写方法参数后表示这个方法可能抛出的异常
 throw写方法体中，明确的抛出一个异常
try{可能出现异常的程序}catch(捕获异常的类型){捕获异常后要做的处理}异常处理机制 fianlly块写
catch后，表示执行完try catch后一定执行的程序无论是否有异常抛出try中可以抛出异常


66.同：都是可以捕捉并恢复的异常，直接或间接继承Exception
异：运行时异常不必须try catch ，一般异常必须try catch

67.NullPointException,ClassCaseException,下标越界


68.
final：修饰词 修饰类时，类不可以被继承，修饰方法时，方法不能被重写，修饰变量时，变量不能被修改
finally:异常中的finally块，是一段代码块，表示无论有没有异常最后都会被执行的代码
finalize:gc在清理无用对象前调用的方法，他在Object中定义的，因此所有对象都有finalize方法

69.A

70.
Collection
	List
		ArrayList
		LinkedList
		victor
	Set
		HashSet
Map
	HashMap
	HashTable
	(ModelMap)

71.Map没有继承Collection

72.ArrayList LinkedList HashMap
add();
remove();
set();
get();
foreach();
size();

put();
remove();
put();
foreach();
get();

73.
ArrayList 和 Vector 内部都是数组，Vector是线程安全的
LinkedList内部是链表
所以 增删速度：LinedList>ArrayList>Vector
查询速度 ArrayList>Vector>LinkedList

74.Collections是针对Collection的帮助类，内部只有一些辅助Collection的静态方法，如Collection.sort()。而
Collection是个接口，底下有许多子接口和实现类

75.1.Hashtable是线程安全的，HashMap不是线程安全的
2.HashMap没有contains方法,Hashtable有
3.HashMap允许null作为key，Hashtable不允许

76.
1.Vector线程安全 ArrayList不是线程安全
2.数据增长时，Vector增长一倍，ArrayList增长%50

77.
1.List：可重复，特定次序
2.Map：以键值对方式储存，Key不能重复，value可重复
3.Set：不可重复，有序

78.
equals，因为Set放的都是引用类型
1.==是运算符，equals是方法
2.==对比的是引用地址是否相同（栈中对比），equals是对比内容是否相同（堆中对比）
equals是调用对象的equals方法，返回值是true false由equals来决定，











